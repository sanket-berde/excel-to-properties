{"version":3,"sources":["components/ExcelToProperties.jsx","App.js","serviceWorker.js","index.js"],"names":["ExcelToProperties","onChange","useState","fileName","setFileName","fileData","setFileData","columnHeaders","setHeaders","keyName","finalObj","slice","reduce","headerAccum","header","obj","rowAccum","row","console","log","style","width","marginBottom","className","htmlFor","accept","display","id","type","e","target","files","name","readXlsxFile","then","rows","headers","splice","data","map","acc","item","index","fontSize","marginRight","alignItems","justifyContent","flexWrap","mappedArr","Object","keys","margin","border","padding","flexBasis","minHeight","onClick","select","value","join","placeholder","color","cursor","href","encodeURIComponent","download","toLowerCase","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6NAKe,SAASA,EAAT,GAAyC,EAAZC,SAAa,IAAD,EACpBC,mBAAS,IADW,mBAC7CC,EAD6C,KACnCC,EADmC,OAEpBF,mBAAS,IAFW,mBAE7CG,EAF6C,KAEnCC,EAFmC,OAGhBJ,mBAAS,IAHO,mBAG7CK,EAH6C,KAG9BC,EAH8B,KA0B9CC,EAAUF,EAAc,GACxBG,EAAWH,EAAcI,MAAM,GAAGC,QAAO,SAACC,EAAaC,GACzD,IAAMC,EAAMV,EAASO,QAAO,SAACI,EAAUC,GAKnC,OADAD,EAASF,GAAT,2BAAwBE,EAASF,IAAjC,kBAA2CG,EAAIR,GAAWQ,EAAIH,KACvDE,IACR,IAEH,OADAH,EAAW,2BAAOA,GAAgBE,KAEnC,IAIH,OAFAG,QAAQC,IAAIT,GAGR,yBAAKU,MAAO,CACRC,MAAO,SAEP,yBAAKD,MAAO,CAAEE,aAAc,SACxB,2BAAOF,MAAO,GAAIG,UAAU,YAAYC,QAAQ,yBAC5C,2BAAOC,OAAO,cAAcL,MAAO,CAAEM,QAAS,QAAUC,GAAG,wBAAwBC,KAAK,OAAO3B,SAvC5F,SAAC4B,GAChBzB,EAAYyB,EAAEC,OAAOC,MAAM,IAAMF,EAAEC,OAAOC,MAAM,GAAGC,MAD7B,IAEdF,EAAWD,EAAXC,OACRG,YAAaH,EAAOC,MAAM,IAAIG,MAAK,SAACC,GAEhC,IAAMC,EAAUD,EAAKE,OAAO,EAAG,GAAG,GAE9BC,EAAOH,EAAKI,KAAI,SAACtB,GAAD,OAChBA,EAAIL,QAAO,SAAC4B,EAAKC,EAAMC,GAEnB,OADAF,EAAIJ,EAAQM,IAAUD,EACfD,IACR,OAEPlC,EAAYgC,GACZ9B,EAAW4B,SAwBP,gBAEqB,yCAErB,0BAAMhB,MAAO,CAAEuB,SAAU,UAAWC,YAAa,SAAWzC,IAEhE,yBAAKiB,MAAO,CACRM,QAAS,OACTmB,WAAY,SACZC,eAAgB,SAChBC,SAAU,SAETxC,EAAcgC,KAAI,SAACE,EAAMC,GACtB,IAtDa3B,EAsDPiC,GAtDOjC,EAsDyBL,EAAS+B,KAtDjBQ,OAAOC,KAAKnC,GAAKwB,KAAI,SAAAE,GAAI,gBAAQA,EAAR,YAAgB1B,EAAI0B,QAAa,GAuDxF,OAAkB,IAAVC,GAEJ,yBAAKtB,MAAO,CAAE+B,OAAQ,OAAQC,OAAQ,iBAAkBC,QAAS,OAAQC,UAAW,QAChF,wBAAIlC,MAAO,CAAE+B,OAAQ,cAAeV,GACpC,8BAAUrB,MAAO,CAAEC,MAAO,MAAOkC,UAAW,SAASvB,KAAMS,EAAMe,QAAS,SAAC3B,GAAQA,EAAEC,OAAO2B,UAAcC,MAAOV,EAAUW,KAAK,MAAOC,YAAanB,IACpJ,uBAAGrB,MAAO,CACFM,QAAS,QACTiB,SAAU,OACVkB,MAAO,UACPC,OAAQ,WACbN,QAAS,SAAC3B,GAAQA,EAAEC,OAAOiC,KAAO,iCAAoCC,mBAAmBhB,EAAUW,KAAK,QAAUM,SAAQ,UAAKxB,EAAKyB,cAAV,gBAL7H,UAMQzB,EAAKyB,cANb,kBAUC,UChEdC,MAZf,WAEE,OACE,yBAAK5C,UAAU,OACb,4BAAQA,UAAU,cAChB,wBAAIH,MAAO,CAAEE,aAAc,SAA3B,gDACA,kBAACtB,EAAD,SCEYoE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlE,QAAQkE,MAAMA,EAAMC,a","file":"static/js/main.a0048f1b.chunk.js","sourcesContent":["/* eslint-disable linebreak-style */\nimport React, { useState } from 'react';\nimport readXlsxFile from 'read-excel-file';\n\n\nexport default function ExcelToProperties({ onChange }) {\n    const [fileName, setFileName] = useState('');\n    const [fileData, setFileData] = useState([]); \n    const [columnHeaders, setHeaders] = useState([]); \n\n    const parseJSONToProperty = (obj) => ((obj && Object.keys(obj).map(item  => `${item}=${obj[item]}`)) || []);    \n\n\n    const fileChange = (e) => {\n        setFileName(e.target.files[0] && e.target.files[0].name);\n        const { target } = e;\n        readXlsxFile(target.files[0]).then((rows) => {\n            // First element in the array is headers. So, neglect first row.\n            const headers = rows.splice(0, 1)[0];\n\n            let data = rows.map((row) =>\n                row.reduce((acc, item, index) => {\n                    acc[headers[index]] = item;\n                    return acc;\n                }, {}),\n            );\n            setFileData(data);\n            setHeaders(headers);\n        });\n    };\n\n    const keyName = columnHeaders[0];\n    const finalObj = columnHeaders.slice(1).reduce((headerAccum, header) => {\n        const obj = fileData.reduce((rowAccum, row) => {\n            // row = { key: 'hello', en: 'Hello', fi: 'Hie', sv: 'Hola' };\n            // rowAccum = { en: { hello: 'Hello'}, fi: { hello: 'Hie'}, sv: { hello: 'Hola'}}\n            \n            rowAccum[header] = { ...rowAccum[header], [row[keyName]]: row[header] };\n            return rowAccum;\n        }, {});    \n        headerAccum = {...headerAccum, ...obj}; \n        return headerAccum;\n    }, {});\n\n    console.log(finalObj);\n\n    return (\n        <div style={{\n            width: '100%'\n        }}>\n            <div style={{ marginBottom: '30px' }}>\n                <label style={{}} className=\"btn first\" htmlFor=\"contained-button-file\">\n                    <input accept=\".xlsx, .xls\" style={{ display: 'none' }} id=\"contained-button-file\" type=\"file\" onChange={fileChange} />\n                        Upload Excel <span>&#8593;</span>\n                </label>\n                <span style={{ fontSize: 'smaller', marginRight: '10px' }}>{fileName}</span>\n            </div>\n            <div style={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                flexWrap: 'wrap'\n            }}>\n                {columnHeaders.map((item, index) => {\n                    const mappedArr = parseJSONToProperty(finalObj[item]);\n                    return (index !== 0 && \n                        (\n                        <div style={{ margin: '10px', border: '1px solid #FFF', padding: '10px', flexBasis: '30%' }}>\n                            <h5 style={{ margin: '10px auto'}}>{item}</h5>\n                            <textarea style={{ width: '90%', minHeight: '200px'}}name={item} onClick={(e) => { e.target.select();  }} value={mappedArr.join('\\n')} placeholder={item} />\n                            <a style={{\n                                    display: 'block',\n                                    fontSize: '20px',\n                                    color: '#F44336',\n                                    cursor: 'pointer'\n                            }} onClick={(e) => { e.target.href = \"data:text/plain;charset=UTF-8,\"  + encodeURIComponent(mappedArr.join('\\n')); }}download={`${item.toLowerCase()}.properties`}>\n                                {`${item.toLowerCase()}.properties`}\n                            </a>\n                        </div>\n                        )\n                        ) || null\n                })}\n            </div>\n        </div>\n    );\n}\n","import React from 'react';\nimport './App.css';\nimport ExcelToProperties from './components/ExcelToProperties';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h2 style={{ marginBottom: '10px' }}>Upload an excel file with appropriate format</h2>\n        <ExcelToProperties />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}